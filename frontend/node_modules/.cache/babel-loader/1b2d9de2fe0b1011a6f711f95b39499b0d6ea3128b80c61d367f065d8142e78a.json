{"ast":null,"code":"import axios from 'axios';\n\n// Configuração base da API\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n\n// Criar instância do axios\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 300000,\n  // 5 minutos\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Interceptor para requests\napi.interceptors.request.use(config => {\n  // Log da requisição em desenvolvimento\n  if (process.env.NODE_ENV === 'development') {\n    var _config$method;\n    console.log(`🚀 ${(_config$method = config.method) === null || _config$method === void 0 ? void 0 : _config$method.toUpperCase()} ${config.url}`);\n  }\n  return config;\n}, error => {\n  console.error('Erro na requisição:', error);\n  return Promise.reject(error);\n});\n\n// Interceptor para responses\napi.interceptors.response.use(response => {\n  // Log da resposta em desenvolvimento\n  if (process.env.NODE_ENV === 'development') {\n    var _response$config$meth;\n    console.log(`✅ ${(_response$config$meth = response.config.method) === null || _response$config$meth === void 0 ? void 0 : _response$config$meth.toUpperCase()} ${response.config.url} - ${response.status}`);\n  }\n  return response;\n}, error => {\n  // Log do erro\n  console.error('Erro na resposta:', error);\n\n  // Tratar diferentes tipos de erro\n  if (error.response) {\n    // Erro com resposta do servidor\n    const {\n      status,\n      data\n    } = error.response;\n    console.error(`❌ ${status}: ${(data === null || data === void 0 ? void 0 : data.detail) || 'Erro desconhecido'}`);\n  } else if (error.request) {\n    // Erro de rede\n    console.error('❌ Erro de rede - servidor não respondeu');\n  } else {\n    // Erro na configuração da requisição\n    console.error('❌ Erro na configuração:', error.message);\n  }\n  return Promise.reject(error);\n});\n\n// Funções da API\n\n// Health Check\nexport const healthCheck = async () => {\n  try {\n    const response = await api.get('/health');\n    return response.data;\n  } catch (error) {\n    throw new Error('API não está respondendo');\n  }\n};\n\n// Upload de arquivo\nexport const uploadFile = async (file, onProgress = null) => {\n  try {\n    const formData = new FormData();\n    formData.append('file', file);\n    const config = {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    };\n\n    // Adicionar callback de progresso se fornecido\n    if (onProgress) {\n      config.onUploadProgress = progressEvent => {\n        const percentCompleted = Math.round(progressEvent.loaded * 100 / progressEvent.total);\n        onProgress(percentCompleted);\n      };\n    }\n    const response = await api.post('/api/upload', formData, config);\n    return response.data;\n  } catch (error) {\n    var _error$response, _error$response$data;\n    if ((_error$response = error.response) !== null && _error$response !== void 0 && (_error$response$data = _error$response.data) !== null && _error$response$data !== void 0 && _error$response$data.erro) {\n      throw new Error(error.response.data.erro);\n    }\n    throw new Error('Erro ao fazer upload do arquivo');\n  }\n};\n\n// Processar simulado\nexport const processSimulado = async (processId, onProgress = null) => {\n  try {\n    const response = await api.post(`/api/processar/${processId}`);\n    return response.data;\n  } catch (error) {\n    var _error$response2, _error$response2$data;\n    if ((_error$response2 = error.response) !== null && _error$response2 !== void 0 && (_error$response2$data = _error$response2.data) !== null && _error$response2$data !== void 0 && _error$response2$data.detail) {\n      throw new Error(error.response.data.detail);\n    }\n    throw new Error('Erro ao processar simulado');\n  }\n};\n\n// Obter estatísticas\nexport const getStatistics = async processId => {\n  try {\n    const response = await api.get(`/api/estatisticas/${processId}`);\n    return response.data;\n  } catch (error) {\n    var _error$response3, _error$response3$data;\n    if ((_error$response3 = error.response) !== null && _error$response3 !== void 0 && (_error$response3$data = _error$response3.data) !== null && _error$response3$data !== void 0 && _error$response3$data.detail) {\n      throw new Error(error.response.data.detail);\n    }\n    throw new Error('Erro ao obter estatísticas');\n  }\n};\n\n// Obter ranking\nexport const getRanking = async processId => {\n  try {\n    const response = await api.get(`/api/ranking/${processId}`);\n    return response.data;\n  } catch (error) {\n    var _error$response4, _error$response4$data;\n    if ((_error$response4 = error.response) !== null && _error$response4 !== void 0 && (_error$response4$data = _error$response4.data) !== null && _error$response4$data !== void 0 && _error$response4$data.detail) {\n      throw new Error(error.response.data.detail);\n    }\n    throw new Error('Erro ao obter ranking');\n  }\n};\n\n// Gerar PDFs\nexport const generatePdfs = async (processId, onProgress = null) => {\n  try {\n    const response = await api.post(`/api/gerar-pdfs/${processId}`);\n    return response.data;\n  } catch (error) {\n    var _error$response5, _error$response5$data;\n    if ((_error$response5 = error.response) !== null && _error$response5 !== void 0 && (_error$response5$data = _error$response5.data) !== null && _error$response5$data !== void 0 && _error$response5$data.detail) {\n      throw new Error(error.response.data.detail);\n    }\n    throw new Error('Erro ao gerar PDFs');\n  }\n};\n\n// Download de PDF individual\nexport const downloadPdf = async (processId, alunoId, nomeAluno) => {\n  try {\n    const response = await api.get(`/api/download-pdf/${processId}/${alunoId}`, {\n      responseType: 'blob'\n    });\n\n    // Criar URL do blob\n    const blob = new Blob([response.data], {\n      type: 'application/pdf'\n    });\n    const url = window.URL.createObjectURL(blob);\n\n    // Criar link temporário para download\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = `Boletim_${nomeAluno.replace(/\\s+/g, '_')}.pdf`;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n\n    // Limpar URL do blob\n    window.URL.revokeObjectURL(url);\n    return true;\n  } catch (error) {\n    var _error$response6, _error$response6$data;\n    if ((_error$response6 = error.response) !== null && _error$response6 !== void 0 && (_error$response6$data = _error$response6.data) !== null && _error$response6$data !== void 0 && _error$response6$data.detail) {\n      throw new Error(error.response.data.detail);\n    }\n    throw new Error('Erro ao baixar PDF');\n  }\n};\n\n// Download de todos os PDFs (ZIP)\nexport const downloadAllPdfs = async processId => {\n  try {\n    const response = await api.get(`/api/download-todos-pdfs/${processId}`, {\n      responseType: 'blob'\n    });\n\n    // Criar URL do blob\n    const blob = new Blob([response.data], {\n      type: 'application/zip'\n    });\n    const url = window.URL.createObjectURL(blob);\n\n    // Criar link temporário para download\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = `boletins_simulado_${processId.slice(0, 8)}.zip`;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n\n    // Limpar URL do blob\n    window.URL.revokeObjectURL(url);\n    return true;\n  } catch (error) {\n    var _error$response7, _error$response7$data;\n    if ((_error$response7 = error.response) !== null && _error$response7 !== void 0 && (_error$response7$data = _error$response7.data) !== null && _error$response7$data !== void 0 && _error$response7$data.detail) {\n      throw new Error(error.response.data.detail);\n    }\n    throw new Error('Erro ao baixar ZIP dos PDFs');\n  }\n};\n\n// Download do template Excel\nexport const downloadTemplate = async () => {\n  try {\n    const response = await api.get('/api/template-excel', {\n      responseType: 'blob'\n    });\n\n    // Criar URL do blob\n    const blob = new Blob([response.data], {\n      type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n    });\n    const url = window.URL.createObjectURL(blob);\n\n    // Criar link temporário para download\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = 'template_simulado_acafe.xlsx';\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n\n    // Limpar URL do blob\n    window.URL.revokeObjectURL(url);\n    return true;\n  } catch (error) {\n    var _error$response8, _error$response8$data;\n    if ((_error$response8 = error.response) !== null && _error$response8 !== void 0 && (_error$response8$data = _error$response8.data) !== null && _error$response8$data !== void 0 && _error$response8$data.detail) {\n      throw new Error(error.response.data.detail);\n    }\n    throw new Error('Erro ao baixar template');\n  }\n};\n\n// Limpar processo\nexport const clearProcess = async processId => {\n  try {\n    const response = await api.delete(`/api/limpar/${processId}`);\n    return response.data;\n  } catch (error) {\n    var _error$response9, _error$response9$data;\n    if ((_error$response9 = error.response) !== null && _error$response9 !== void 0 && (_error$response9$data = _error$response9.data) !== null && _error$response9$data !== void 0 && _error$response9$data.detail) {\n      throw new Error(error.response.data.detail);\n    }\n    throw new Error('Erro ao limpar processo');\n  }\n};\n\n// Função helper para processar fluxo completo\nexport const processCompleteFlow = async (file, callbacks = {}) => {\n  const {\n    onUploadProgress,\n    onUploadComplete,\n    onProcessingStart,\n    onProcessingComplete,\n    onPdfGenerationStart,\n    onPdfGenerationComplete,\n    onError\n  } = callbacks;\n  try {\n    // 1. Upload do arquivo\n    if (onUploadProgress) onUploadProgress(0);\n    const uploadResult = await uploadFile(file, onUploadProgress);\n    if (onUploadComplete) onUploadComplete(uploadResult);\n    const processId = uploadResult.processo_id;\n\n    // 2. Processar simulado\n    if (onProcessingStart) onProcessingStart();\n    const processingResult = await processSimulado(processId);\n    if (onProcessingComplete) onProcessingComplete(processingResult);\n\n    // 3. Gerar PDFs\n    if (onPdfGenerationStart) onPdfGenerationStart();\n    const pdfsResult = await generatePdfs(processId);\n    if (onPdfGenerationComplete) onPdfGenerationComplete(pdfsResult);\n    return {\n      processId,\n      uploadResult,\n      processingResult,\n      pdfsResult\n    };\n  } catch (error) {\n    if (onError) onError(error);\n    throw error;\n  }\n};\n\n// Função helper para validar arquivo antes do upload\nexport const validateFile = file => {\n  const errors = [];\n  const warnings = [];\n\n  // Verificar tipo de arquivo\n  const allowedTypes = ['application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n  // .xlsx\n  'application/vnd.ms-excel' // .xls\n  ];\n  if (!allowedTypes.includes(file.type)) {\n    errors.push('Arquivo deve ser Excel (.xlsx ou .xls)');\n  }\n\n  // Verificar tamanho (200MB max)\n  const maxSize = 200 * 1024 * 1024; // 200MB em bytes\n  if (file.size > maxSize) {\n    errors.push('Arquivo muito grande (máximo 200MB)');\n  }\n\n  // Verificar nome do arquivo\n  if (!file.name.match(/\\.(xlsx|xls)$/i)) {\n    warnings.push('Extensão do arquivo pode não ser reconhecida');\n  }\n  return {\n    isValid: errors.length === 0,\n    errors,\n    warnings\n  };\n};\n\n// Função helper para formatar erros da API\nexport const formatApiError = error => {\n  if (error.response) {\n    // Erro com resposta do servidor\n    const {\n      status,\n      data\n    } = error.response;\n    switch (status) {\n      case 400:\n        return (data === null || data === void 0 ? void 0 : data.detail) || 'Dados inválidos';\n      case 404:\n        return 'Recurso não encontrado';\n      case 413:\n        return 'Arquivo muito grande';\n      case 422:\n        return 'Dados não processáveis';\n      case 500:\n        return 'Erro interno do servidor';\n      case 503:\n        return 'Serviço temporariamente indisponível';\n      default:\n        return (data === null || data === void 0 ? void 0 : data.detail) || `Erro ${status}`;\n    }\n  } else if (error.request) {\n    // Erro de rede\n    return 'Erro de conexão - verifique sua internet';\n  } else {\n    // Erro na configuração\n    return error.message || 'Erro desconhecido';\n  }\n};\n\n// Função helper para retry automático\nexport const withRetry = async (fn, maxRetries = 3, delay = 1000) => {\n  let lastError;\n  for (let i = 0; i < maxRetries; i++) {\n    try {\n      return await fn();\n    } catch (error) {\n      var _error$response0, _error$response1;\n      lastError = error;\n\n      // Não fazer retry para erros 4xx (erro do cliente)\n      if (((_error$response0 = error.response) === null || _error$response0 === void 0 ? void 0 : _error$response0.status) >= 400 && ((_error$response1 = error.response) === null || _error$response1 === void 0 ? void 0 : _error$response1.status) < 500) {\n        throw error;\n      }\n\n      // Aguardar antes do próximo retry\n      if (i < maxRetries - 1) {\n        await new Promise(resolve => setTimeout(resolve, delay * (i + 1)));\n      }\n    }\n  }\n  throw lastError;\n};\n\n// Exportar instância do axios para uso direto se necessário\nexport { api };\n\n// Exportar URL base\nexport { API_BASE_URL };","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","timeout","headers","interceptors","request","use","config","NODE_ENV","_config$method","console","log","method","toUpperCase","url","error","Promise","reject","response","_response$config$meth","status","data","detail","message","healthCheck","get","Error","uploadFile","file","onProgress","formData","FormData","append","onUploadProgress","progressEvent","percentCompleted","Math","round","loaded","total","post","_error$response","_error$response$data","erro","processSimulado","processId","_error$response2","_error$response2$data","getStatistics","_error$response3","_error$response3$data","getRanking","_error$response4","_error$response4$data","generatePdfs","_error$response5","_error$response5$data","downloadPdf","alunoId","nomeAluno","responseType","blob","Blob","type","window","URL","createObjectURL","link","document","createElement","href","download","replace","body","appendChild","click","removeChild","revokeObjectURL","_error$response6","_error$response6$data","downloadAllPdfs","slice","_error$response7","_error$response7$data","downloadTemplate","_error$response8","_error$response8$data","clearProcess","delete","_error$response9","_error$response9$data","processCompleteFlow","callbacks","onUploadComplete","onProcessingStart","onProcessingComplete","onPdfGenerationStart","onPdfGenerationComplete","onError","uploadResult","processo_id","processingResult","pdfsResult","validateFile","errors","warnings","allowedTypes","includes","push","maxSize","size","name","match","isValid","length","formatApiError","withRetry","fn","maxRetries","delay","lastError","i","_error$response0","_error$response1","resolve","setTimeout"],"sources":["/Users/juliocesardebonadesouza/Desktop/Corretor ACAFE V2/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\n// Configuração base da API\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n\n// Criar instância do axios\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 300000, // 5 minutos\n  headers: {\n    'Content-Type': 'application/json',\n  },\n} );\n\n// Interceptor para requests\napi.interceptors.request.use(\n  (config) => {\n    // Log da requisição em desenvolvimento\n    if (process.env.NODE_ENV === 'development') {\n      console.log(`🚀 ${config.method?.toUpperCase()} ${config.url}`);\n    }\n    return config;\n  },\n  (error) => {\n    console.error('Erro na requisição:', error);\n    return Promise.reject(error);\n  }\n);\n\n// Interceptor para responses\napi.interceptors.response.use(\n  (response) => {\n    // Log da resposta em desenvolvimento\n    if (process.env.NODE_ENV === 'development') {\n      console.log(`✅ ${response.config.method?.toUpperCase()} ${response.config.url} - ${response.status}`);\n    }\n    return response;\n  },\n  (error) => {\n    // Log do erro\n    console.error('Erro na resposta:', error);\n    \n    // Tratar diferentes tipos de erro\n    if (error.response) {\n      // Erro com resposta do servidor\n      const { status, data } = error.response;\n      console.error(`❌ ${status}: ${data?.detail || 'Erro desconhecido'}`);\n    } else if (error.request) {\n      // Erro de rede\n      console.error('❌ Erro de rede - servidor não respondeu');\n    } else {\n      // Erro na configuração da requisição\n      console.error('❌ Erro na configuração:', error.message);\n    }\n    \n    return Promise.reject(error);\n  }\n);\n\n// Funções da API\n\n// Health Check\nexport const healthCheck = async () => {\n  try {\n    const response = await api.get('/health');\n    return response.data;\n  } catch (error) {\n    throw new Error('API não está respondendo');\n  }\n};\n\n// Upload de arquivo\nexport const uploadFile = async (file, onProgress = null) => {\n  try {\n    const formData = new FormData();\n    formData.append('file', file);\n\n    const config = {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n    };\n\n    // Adicionar callback de progresso se fornecido\n    if (onProgress) {\n      config.onUploadProgress = (progressEvent) => {\n        const percentCompleted = Math.round(\n          (progressEvent.loaded * 100) / progressEvent.total\n        );\n        onProgress(percentCompleted);\n      };\n    }\n\n    const response = await api.post('/api/upload', formData, config);\n    return response.data;\n  } catch (error) {\n    if (error.response?.data?.erro) {\n      throw new Error(error.response.data.erro);\n    }\n    throw new Error('Erro ao fazer upload do arquivo');\n  }\n};\n\n// Processar simulado\nexport const processSimulado = async (processId, onProgress = null) => {\n  try {\n    const response = await api.post(`/api/processar/${processId}`);\n    return response.data;\n  } catch (error) {\n    if (error.response?.data?.detail) {\n      throw new Error(error.response.data.detail);\n    }\n    throw new Error('Erro ao processar simulado');\n  }\n};\n\n// Obter estatísticas\nexport const getStatistics = async (processId) => {\n  try {\n    const response = await api.get(`/api/estatisticas/${processId}`);\n    return response.data;\n  } catch (error) {\n    if (error.response?.data?.detail) {\n      throw new Error(error.response.data.detail);\n    }\n    throw new Error('Erro ao obter estatísticas');\n  }\n};\n\n// Obter ranking\nexport const getRanking = async (processId) => {\n  try {\n    const response = await api.get(`/api/ranking/${processId}`);\n    return response.data;\n  } catch (error) {\n    if (error.response?.data?.detail) {\n      throw new Error(error.response.data.detail);\n    }\n    throw new Error('Erro ao obter ranking');\n  }\n};\n\n// Gerar PDFs\nexport const generatePdfs = async (processId, onProgress = null) => {\n  try {\n    const response = await api.post(`/api/gerar-pdfs/${processId}`);\n    return response.data;\n  } catch (error) {\n    if (error.response?.data?.detail) {\n      throw new Error(error.response.data.detail);\n    }\n    throw new Error('Erro ao gerar PDFs');\n  }\n};\n\n// Download de PDF individual\nexport const downloadPdf = async (processId, alunoId, nomeAluno) => {\n  try {\n    const response = await api.get(`/api/download-pdf/${processId}/${alunoId}`, {\n      responseType: 'blob',\n    });\n\n    // Criar URL do blob\n    const blob = new Blob([response.data], { type: 'application/pdf' });\n    const url = window.URL.createObjectURL(blob);\n\n    // Criar link temporário para download\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = `Boletim_${nomeAluno.replace(/\\s+/g, '_')}.pdf`;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n\n    // Limpar URL do blob\n    window.URL.revokeObjectURL(url);\n\n    return true;\n  } catch (error) {\n    if (error.response?.data?.detail) {\n      throw new Error(error.response.data.detail);\n    }\n    throw new Error('Erro ao baixar PDF');\n  }\n};\n\n// Download de todos os PDFs (ZIP)\nexport const downloadAllPdfs = async (processId) => {\n  try {\n    const response = await api.get(`/api/download-todos-pdfs/${processId}`, {\n      responseType: 'blob',\n    });\n\n    // Criar URL do blob\n    const blob = new Blob([response.data], { type: 'application/zip' });\n    const url = window.URL.createObjectURL(blob);\n\n    // Criar link temporário para download\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = `boletins_simulado_${processId.slice(0, 8)}.zip`;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n\n    // Limpar URL do blob\n    window.URL.revokeObjectURL(url);\n\n    return true;\n  } catch (error) {\n    if (error.response?.data?.detail) {\n      throw new Error(error.response.data.detail);\n    }\n    throw new Error('Erro ao baixar ZIP dos PDFs');\n  }\n};\n\n// Download do template Excel\nexport const downloadTemplate = async () => {\n  try {\n    const response = await api.get('/api/template-excel', {\n      responseType: 'blob',\n    });\n\n    // Criar URL do blob\n    const blob = new Blob([response.data], { \n      type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' \n    });\n    const url = window.URL.createObjectURL(blob);\n\n    // Criar link temporário para download\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = 'template_simulado_acafe.xlsx';\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n\n    // Limpar URL do blob\n    window.URL.revokeObjectURL(url);\n\n    return true;\n  } catch (error) {\n    if (error.response?.data?.detail) {\n      throw new Error(error.response.data.detail);\n    }\n    throw new Error('Erro ao baixar template');\n  }\n};\n\n// Limpar processo\nexport const clearProcess = async (processId) => {\n  try {\n    const response = await api.delete(`/api/limpar/${processId}`);\n    return response.data;\n  } catch (error) {\n    if (error.response?.data?.detail) {\n      throw new Error(error.response.data.detail);\n    }\n    throw new Error('Erro ao limpar processo');\n  }\n};\n\n// Função helper para processar fluxo completo\nexport const processCompleteFlow = async (file, callbacks = {}) => {\n  const {\n    onUploadProgress,\n    onUploadComplete,\n    onProcessingStart,\n    onProcessingComplete,\n    onPdfGenerationStart,\n    onPdfGenerationComplete,\n    onError,\n  } = callbacks;\n\n  try {\n    // 1. Upload do arquivo\n    if (onUploadProgress) onUploadProgress(0);\n    const uploadResult = await uploadFile(file, onUploadProgress);\n    if (onUploadComplete) onUploadComplete(uploadResult);\n\n    const processId = uploadResult.processo_id;\n\n    // 2. Processar simulado\n    if (onProcessingStart) onProcessingStart();\n    const processingResult = await processSimulado(processId);\n    if (onProcessingComplete) onProcessingComplete(processingResult);\n\n    // 3. Gerar PDFs\n    if (onPdfGenerationStart) onPdfGenerationStart();\n    const pdfsResult = await generatePdfs(processId);\n    if (onPdfGenerationComplete) onPdfGenerationComplete(pdfsResult);\n\n    return {\n      processId,\n      uploadResult,\n      processingResult,\n      pdfsResult,\n    };\n  } catch (error) {\n    if (onError) onError(error);\n    throw error;\n  }\n};\n\n// Função helper para validar arquivo antes do upload\nexport const validateFile = (file) => {\n  const errors = [];\n  const warnings = [];\n\n  // Verificar tipo de arquivo\n  const allowedTypes = [\n    'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', // .xlsx\n    'application/vnd.ms-excel', // .xls\n  ];\n\n  if (!allowedTypes.includes(file.type)) {\n    errors.push('Arquivo deve ser Excel (.xlsx ou .xls)');\n  }\n\n  // Verificar tamanho (200MB max)\n  const maxSize = 200 * 1024 * 1024; // 200MB em bytes\n  if (file.size > maxSize) {\n    errors.push('Arquivo muito grande (máximo 200MB)');\n  }\n\n  // Verificar nome do arquivo\n  if (!file.name.match(/\\.(xlsx|xls)$/i)) {\n    warnings.push('Extensão do arquivo pode não ser reconhecida');\n  }\n\n  return {\n    isValid: errors.length === 0,\n    errors,\n    warnings,\n  };\n};\n\n// Função helper para formatar erros da API\nexport const formatApiError = (error) => {\n  if (error.response) {\n    // Erro com resposta do servidor\n    const { status, data } = error.response;\n    \n    switch (status) {\n      case 400:\n        return data?.detail || 'Dados inválidos';\n      case 404:\n        return 'Recurso não encontrado';\n      case 413:\n        return 'Arquivo muito grande';\n      case 422:\n        return 'Dados não processáveis';\n      case 500:\n        return 'Erro interno do servidor';\n      case 503:\n        return 'Serviço temporariamente indisponível';\n      default:\n        return data?.detail || `Erro ${status}`;\n    }\n  } else if (error.request) {\n    // Erro de rede\n    return 'Erro de conexão - verifique sua internet';\n  } else {\n    // Erro na configuração\n    return error.message || 'Erro desconhecido';\n  }\n};\n\n// Função helper para retry automático\nexport const withRetry = async (fn, maxRetries = 3, delay = 1000) => {\n  let lastError;\n  \n  for (let i = 0; i < maxRetries; i++) {\n    try {\n      return await fn();\n    } catch (error) {\n      lastError = error;\n      \n      // Não fazer retry para erros 4xx (erro do cliente)\n      if (error.response?.status >= 400 && error.response?.status < 500) {\n        throw error;\n      }\n      \n      // Aguardar antes do próximo retry\n      if (i < maxRetries - 1) {\n        await new Promise(resolve => setTimeout(resolve, delay * (i + 1)));\n      }\n    }\n  }\n  \n  throw lastError;\n};\n\n// Exportar instância do axios para uso direto se necessário\nexport { api };\n\n// Exportar URL base\nexport { API_BASE_URL };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}